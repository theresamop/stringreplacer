@model StringReplacer.Models.StringReplacerViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    input, textarea {
        width: 400px;
    }
    
</style>
<div class="jumbotron">
    <h1>STRING REPLACER</h1>
    <p class="lead">STRING REPLACER is free tool for developers in creating classes, repetitive codes and other encoding requirements</p>

    <h2>What is String REPLACER's main purpose?</h2>
    <p class="lead">Ever had a day when you have to convert an sql table into a class but too many columns on it, and you're too busy(or lazy) to type?</p>
    <p>If yes, you can just get the create script of a table and put it in a text file, send it here then we will generate the class for you!</p>

    <p class="lead">Ever had a day when you have to code a mapper of an entity going to your class, and there are too many properties and you're too busy(or lazy) to type?</p>
    <p>If yes, you can just send the file here and we will generate that repetitive code for you!</p>

    <p class="lead">Ever had a day when you have to code a line repeateadly but there's one field that is different and replace all will not cut it?</p>
    <p>If yes, you can just send the file here and we will generate that repetitive code for you!</p>

    <h2>Anything that is repetitive, we can repeat it for you in just few steps, and there will be no more long typing jobs, because you are not an encoder, you are a programmer!</h2>

    <div id="choiceParse">
        <h5>Please choose a pre-made string pattern or choose "custom pattern" to make your own</h5>
        <div>
            @Html.DropDownListFor(model => model.ReplacerType, Model.ReplacerTypes.OrderBy(x => x.Text), new { })
        </div>
        <div>
            @Html.RadioButtonFor(model => model.IsDotNet, "C#") @Html.Label("C#")
            @Html.RadioButtonFor(model => model.IsDotNet, "Java") @Html.Label("Java")
        </div>
        <h5>Please enter your filepath input where your class/data is at e.g. C:\myclass.txt</h5>
        <p>
            @Html.TextBoxFor(m => m.FilePathInput, new { @class = "textboxecppage", @placeholder = "e.g. C:\\sqltable.txt" })

        </p>
        <h5>Please enter the splitter character </h5>
        <p>
            @Html.DropDownListFor(model => model.Splitter, Model.SplitterTypes.OrderBy(x => x.Text), new { })

        </p>
        <h5>Optional: Enter characters to remove inside the {} dynamic input, delimeted by comma(',') for each character.</h5>
        <p>
            @Html.TextBoxFor(m => m.CharsToRemove, new { @class = "textboxecppage", @placeholder = "e.g. [,] " })

        </p>
    </div>
    <div id="customParser" disabled="disabled">
        <h5>Please enter the string dynamic input enclosed in a curly braces ({}) e.g. {[Id]} {[bigint]} IDENTITY(1,1) NOT NULL  where { } represents the dynamic data, in consecutive order synced with the string pattern</h5>
        <h5>ex. {[Id]} {[bigint]} IDENTITY(1,1) NOT NULL  where Id=0 and bigint=1 will be the replacement text to the pattern set below</h5>
        <p>
            @Html.TextBoxFor(m => m.StringDynamicInput, new { @class = "textboxecppage" })

        </p>

        <h5>Please enter the string pattern e.g. public {0} {1} {get; set;} where {n} represents the dynamic data, in consecutive order</h5>
        <h5>ex. [Id] [bigint] IDENTITY(1,1) NOT NULL  will be converted to public long Id {get; set;}</h5>
        <p>
            @Html.TextBoxFor(m => m.StringMake, new { @class = "textboxecppage" })

        </p>
        <h5>Optional: Do you want to convert the datatypes if there's any inside {} dynamic input?</h5>
        <h5>ex. bigint to long | nvarchar to string etc.</h5>
        @Html.CheckBoxFor(m => m.IsConvertDatatype, false)
    </div>
    <p> <button class="btn btn-default" id="generateString">RUN</button></p>
</div>

<script type="text/javascript">


    $(function () {

        var setControls = function (settings, isEmptyField) {
            $('#customParser').attr("disabled", settings);
            $("#StringMake").val(isEmptyField? "" : "public {0} {1} {{ get; set; }}");
            $("#StringDynamicInput").val(isEmptyField ? "" : "{[Id]} {[bigint]} IDENTITY(1, 1) NOT NULL");

            $("#StringMake").attr("disabled", settings);
            $("#StringDynamicInput").attr("disabled", settings);
        };

        setControls(true);

        $('#generateString').click(function () {
           

            var url = '@Url.Action("GenerateString", "Home")';


        var data = {

            FilePathInput: $("#FilePathInput").val(),
            FilePathOutput: $("#FilePathOutput").val(),
            StringMake: $("#StringMake").val(),
            ReplacerType: $("#ReplacerType").val(),
            StringDynamicInput: $("#StringDynamicInput").val(),
            Splitter: $("#Splitter").val(),
            CharsToRemove: $("#CharsToRemove").val(),
            IsConvertDatatype: $("#IsConvertDatatype").val(),
            };

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(data),
                traditional: true,
                dataType: 'json',
                error: function () {
                    alert("error");
                }
            }).done(function (data) {
                if (data.success) {
                    window.location.href = '/Home/GetFile/?key=' + data.key;

                }
                else {
                    if (response.data.error !== undefined && response.data.error !== "") {
                        alert("error");
                    }
                }
            });
        });

        $('#IsDotNet').change(function () {

            if (this.value === "Java") {
                alert("Java coming soon!");
            }
        });
        

        $('#IsConvertDatatype').change(function (val) {

            if (val === "true") {
                alert("Java coming soon!");
            }
        });


        $('#ReplacerType').change(function () {
            if ($('#ReplacerType').val() === "1") {
                setControls(true);
              
            }
            else {
                $('#customParser').attr("disabled", false);


                setControls(false, true);

            }
        });


       
    });
</script>

